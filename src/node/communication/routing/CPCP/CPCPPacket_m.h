//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/CPCP/CPCPPacket.msg.
//

#ifndef _CPCPPACKET_M_H_
#define _CPCPPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/CPCP/CPCPPacket.msg:9</tt> by nedtool.
 * <pre>
 * enum CPCPPacket_Type
 * {
 * 
 *     CPCP_ADV_PACKET = 1;
 *     CPCP_JOIN_PACKET = 2;
 *     CPCP_TDMA_PACKET = 3;
 *     CPCP_DATA_PACKET = 4;
 *     CPCP_ACTIVATION_PACKET = 5;
 *     CPCP_FIND_NEIGHBOURS_PACKET = 6;
 * }
 * </pre>
 */
enum CPCPPacket_Type {
    CPCP_ADV_PACKET = 1,
    CPCP_JOIN_PACKET = 2,
    CPCP_TDMA_PACKET = 3,
    CPCP_DATA_PACKET = 4,
    CPCP_ACTIVATION_PACKET = 5,
    CPCP_FIND_NEIGHBOURS_PACKET = 6
};

/**
 * Class generated from <tt>src/node/communication/routing/CPCP/CPCPPacket.msg:19</tt> by nedtool.
 * <pre>
 * packet CPCPPacket extends RoutingPacket
 * {
 *     int CPCPPacketKind @enum(CPCPPacket_Type);
 *     int schedule[];
 *     int numOfPackets;
 * }
 * </pre>
 */
class CPCPPacket : public ::RoutingPacket
{
  protected:
    int CPCPPacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;
    int numOfPackets_var;

  private:
    void copy(const CPCPPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CPCPPacket&);

  public:
    CPCPPacket(const char *name=NULL, int kind=0);
    CPCPPacket(const CPCPPacket& other);
    virtual ~CPCPPacket();
    CPCPPacket& operator=(const CPCPPacket& other);
    virtual CPCPPacket *dup() const {return new CPCPPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCPCPPacketKind() const;
    virtual void setCPCPPacketKind(int CPCPPacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual int getNumOfPackets() const;
    virtual void setNumOfPackets(int numOfPackets);
};

inline void doPacking(cCommBuffer *b, CPCPPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CPCPPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _CPCPPACKET_M_H_

