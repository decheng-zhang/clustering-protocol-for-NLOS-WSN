//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/distance/D_RSSI.msg.
//

#ifndef _D_RSSI_M_H_
#define _D_RSSI_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/distance/D_RSSI.msg:8</tt> by nedtool.
 * <pre>
 * enum D_RSSI_Type
 * {
 * 
 *     D_RSSI_ADV_PACKET = 1;
 * }
 * </pre>
 */
enum D_RSSI_Type {
    D_RSSI_ADV_PACKET = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/distance/D_RSSI.msg:13</tt> by nedtool.
 * <pre>
 * packet D_RSSI_Packet extends RoutingPacket
 * {
 *     int D_RSSI_PacketKind @enum(D_RSSI_Type);
 *     int schedule[];
 * }
 * </pre>
 */
class D_RSSI_Packet : public ::RoutingPacket
{
  protected:
    int D_RSSI_PacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;

  private:
    void copy(const D_RSSI_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const D_RSSI_Packet&);

  public:
    D_RSSI_Packet(const char *name=NULL, int kind=0);
    D_RSSI_Packet(const D_RSSI_Packet& other);
    virtual ~D_RSSI_Packet();
    D_RSSI_Packet& operator=(const D_RSSI_Packet& other);
    virtual D_RSSI_Packet *dup() const {return new D_RSSI_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getD_RSSI_PacketKind() const;
    virtual void setD_RSSI_PacketKind(int D_RSSI_PacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
};

inline void doPacking(cCommBuffer *b, D_RSSI_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, D_RSSI_Packet& obj) {obj.parsimUnpack(b);}


#endif // ifndef _D_RSSI_M_H_

