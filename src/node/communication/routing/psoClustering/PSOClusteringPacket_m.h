//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/psoClustering/PSOClusteringPacket.msg.
//

#ifndef _PSOCLUSTERINGPACKET_M_H_
#define _PSOCLUSTERINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Struct generated from src/node/communication/routing/psoClustering/PSOClusteringPacket.msg:8 by nedtool.
 */
struct nodeData5
{
    nodeData5();
    int id;
    int serialNo;
    double energy;
};

void doPacking(cCommBuffer *b, nodeData5& a);
void doUnpacking(cCommBuffer *b, nodeData5& a);

/**
 * Enum generated from <tt>src/node/communication/routing/psoClustering/PSOClusteringPacket.msg:15</tt> by nedtool.
 * <pre>
 * enum PSOClusteringPacket_Type
 * {
 * 
 *     PSO_CLUSTERING_DATA_PACKET = 1;
 *     PSO_CLUSTERING_FIND_NEIGHBOURS_PACKET = 2;
 * }
 * </pre>
 */
enum PSOClusteringPacket_Type {
    PSO_CLUSTERING_DATA_PACKET = 1,
    PSO_CLUSTERING_FIND_NEIGHBOURS_PACKET = 2
};

/**
 * Class generated from <tt>src/node/communication/routing/psoClustering/PSOClusteringPacket.msg:21</tt> by nedtool.
 * <pre>
 * packet PSOClusteringPacket extends RoutingPacket
 * {
 *     nodeData5 info;
 *     double numOfPackets = 1.0;
 *     int PSOClusteringPacketKind @enum(PSOClusteringPacket_Type);
 *     int schedule[];
 * }
 * </pre>
 */
class PSOClusteringPacket : public ::RoutingPacket
{
  protected:
    nodeData5 info_var;
    double numOfPackets_var;
    int PSOClusteringPacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;

  private:
    void copy(const PSOClusteringPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PSOClusteringPacket&);

  public:
    PSOClusteringPacket(const char *name=NULL, int kind=0);
    PSOClusteringPacket(const PSOClusteringPacket& other);
    virtual ~PSOClusteringPacket();
    PSOClusteringPacket& operator=(const PSOClusteringPacket& other);
    virtual PSOClusteringPacket *dup() const {return new PSOClusteringPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual nodeData5& getInfo();
    virtual const nodeData5& getInfo() const {return const_cast<PSOClusteringPacket*>(this)->getInfo();}
    virtual void setInfo(const nodeData5& info);
    virtual double getNumOfPackets() const;
    virtual void setNumOfPackets(double numOfPackets);
    virtual int getPSOClusteringPacketKind() const;
    virtual void setPSOClusteringPacketKind(int PSOClusteringPacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
};

inline void doPacking(cCommBuffer *b, PSOClusteringPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PSOClusteringPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PSOCLUSTERINGPACKET_M_H_

